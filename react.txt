                                MODULE: 2 (JavaScript Essentials)

• What is JavaScript Output method?
->JavaScript can "display" data in different ways: Writing into an HTML element, using innerHTML .
  Writing into the HTML output using document.write() . Writing into an alert box, using window.alert() .
  Writing into the browser console, using console.log() .

• How to used JavaScript Output method?
->JavaScript Output
  Writing into an HTML element, using innerHTML .
  Writing into the HTML output using document.write() .
  Writing into an alert box, using window.alert() .
  Writing into the browser console, using console.log() .

• How to used JavaScript Events to do all examples?
-> Common Event Listeners
   Onload: When your page loads, it performs accordingly.
   Onclick: When a user clicks on a button or inputs it occurs.
   Onmouseover: When a user mouses over on the button.
   Onfocus: Certain scenarios when a user keeps the cursor in a form field.
   Onblur: If a particular form field leaves within it.



                     MODULE: 3 (JavaScript Essentials)::

• What is React Js?
-> reactjs is singlepage application make.
   more secure to another library.
   fast and efficient.

• What is NPM in React Js?
-> NPM is short for node package manager, an online directory that contains the various already
   registered open-source packages. NPM modules consume the various functions as a third-party 
   package when installed into an app using the NPM command npm install .

• What is Role of Node Js in react Js?
-> NodeJS is a framework of JavaScript which is mainly used for working with the backend of our
   application or building the backend using JavaScript, whereas ReactJS is a JavaScript front-end
   library. It is mainly used for building the user interface or the frontend of our application.

• What is CLI command In React Js?
-> create-react-app used to generate the boilerplate version of a React application thru command line.

• What is Components in React Js?
-> Components are independent and reusable bits of code. They serve the same purpose as JavaScript
   functions, but work in isolation and return HTML. Components come in two types, Class components 
   and Function components, in this tutorial we will concentrate on Function components.

• What is Header and Content Components in React Js?
-> Headers are compositions that extend standard navbar functionalities.
   They contain additional components like a jumbotron, sub-navbar, or image
   covers which serve as a containers for extra navigation elements - usually 
   links, forms, or call-to-action buttons.

• How to install React Js on Windows, Linux Operating System? How to
  install NPM and How to check version of NPM?
->• Step 1: Install Node.js installer for windows. Click on this link. Here install the LTS version 
    (the one present on the left). Once downloaded open NodeJS without disturbing other settings, click
     on the Next button until it’s completely installed.
->Step 2: Open command prompt  to check whether it is completely installed or not type the command –> 

      node -v

->Step 3: Now in the terminal run the below command: 

         npm install -g create-react-app  

-> create-react-app --version
->Step 4:Now Create a new folder where you want to make your react app using the below command: 

       mkdir newfolder
->cd newfolder (your folder name)
-> To start your app run the below command :

    npm start  


• How to check version of React Js?
-> npm view react version

• How to change in components of React Js?
->We have to set initial state value inside constructor function and set click event
  handler of the element upon which click, results in changing state. Then pass the 
  function to the click handler and change the state of the component inside the function using setState.


                           MODULE: 4 (List and Hooks)::

• Explain Life cycle in Class Component and functional component with Hooks
->First, let’s take a look at how it’s been done traditionally. In order to do that, we’re going to
 take a closer look at React components.

As you probably know, each React component instance has a lifecycle. The component’s lifecycle consists of three phases:

Mounting lifecycle methods, that is inserting elements into the DOM.
Updating, which involves methods for updating components in the DOM.
Unmounting, that is removing a component from the DOM.
Each phase has its own methods, which make it easier to perform typical operations on the components.
 With class-based components, React developers directly extend from the React.Component in order to access the methods.

There is no need to address all of the React component lifecycle methods here. The best source of 
information on currently supported methods for class components is the official React documentation. 
Instead, let’s take a closer look at just a couple examples of lifecycle methods. However, before we do, 
let’s quickly address the topic that is likely on your mind right now.

Class components vs functional components
As you probably know, an alternative way of taking advantage of lifecycle methods is to use hooks. 
With the release of React 16.8 back in March 2019, it is now possible to create functional components 
that are not stateless and can use lifecycle methods. 

It’s all thanks to the useState and useEffect hooks – special functions that hook into React features that 
allow to set the initial state and use lifecycle events in functional components. Currently, it is possible to 
emulate the performance of almost any supported lifecycle method by skilfully applying these two hooks in your 
pure JavaScript functions.




                                        MODULE: 6 (React Router)::


● Create React app with modules and lazy loading (Admin-user module with
child Router and outlet)

.different between angular and react.

->AngularJS is a structural framework for developing dynamic web apps, whereas React is 
  a JavaScript library that allows you to build UI components. Angular JS is based on MVC 
  (Model View Controller) whereas React is based on Virtual DOM. Angular is based on Typescript and React 
  is based on JavaScript.